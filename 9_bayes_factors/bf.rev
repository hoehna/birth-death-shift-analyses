################################################################################## RevBayes Example: Bayesian inference of diversification rates under a#                   branch-specific birth-death model### authors: Sebastian Hoehna#################################################################################DATASET             = "primates"NUM_RATE_CATEGORIES = 10EXPECTED_NUM_EVENTS = 2.0#NUM_TOTAL_SPECIES  = 367######################## Reading in the Data ######################### Read in the observed phylogenyobserved_phylogeny <- readTrees(DATASET + ".tre")[1]# Get the names of the taxa in the tree and the age of the tree. We need these later on.taxa <- observed_phylogeny.taxa()root <- observed_phylogeny.rootAge()tree_length <- observed_phylogeny.treeLength()# set my move indexmvi = 0mni = 0# Global parameters for our analysisNUM_TOTAL_SPECIES = taxa.size()H = 0.587405##################### Create the rates ######################## rho is the probability of sampling species at the present### fix this to 367/367, since there are ~367 described species of primates### and we have sampled 367rho <- observed_phylogeny.ntips() / NUM_TOTAL_SPECIES### Specify a prior on the speciation and extinction ratesrate_mean <- (NUM_TOTAL_SPECIES-2) / tree_lengthrate_sd   <- Hrate_sd ~ dnExponential( 1.0 / H )moves[++mvi] = mvScale(rate_sd, lambda=1, tune=true, weight=2.0)### Create a lognormal distributed variable for the mean speciation ratespeciation_mean ~ dnLoguniform( 1E-6, 1E2)speciation_mean.setValue( rate_mean )moves[++mvi] = mvScale(speciation_mean, lambda=1, tune=true, weight=2.0)### Create a lognormal distributed variable for the mean extinction rateextinction_mean ~ dnLoguniform( 1E-6, 1E2)extinction_mean.setValue( rate_mean / 2.0 )moves[++mvi] = mvScale(extinction_mean, lambda=1, tune=true, weight=2.0)### Create a deterministic variable for the speciation rate categories### using a discretized lognormal distribution (the N-quantiles of it)speciation := fnDiscretizeDistribution( dnLognormal(ln(speciation_mean), rate_sd), NUM_RATE_CATEGORIES )### Create a deterministic variable for the speciation rate categories### Assume that all extinction rates are equalextinction := rep(extinction_mean, NUM_RATE_CATEGORIES)### Create a exponential distributed variable for the rate of rate-shift eventsevent_rate <- EXPECTED_NUM_EVENTS/tree_length### Create a uniformly distributed variable for the category at the rootrate_cat_probs <- simplex( rep(1, NUM_RATE_CATEGORIES) )#### construct a variable for the tree drawn from a birth death processtimetree ~ dnCDBDP( rootAge           = root,                    speciationRates   = speciation,                    extinctionRates   = extinction,                     Q                 = fnJC(NUM_RATE_CATEGORIES),                    delta             = event_rate,                     pi                = rate_cat_probs,                    rho               = rho,                    condition         = "time" )                    ### clamp the model with the "observed" treetimetree.clamp(observed_phylogeny)############## The Model ################# workspace model wrapper ###mymodel = model(speciation)### set up the monitors that will output parameter values to file and screenmonitors[++mni] = mnScreen(printgen=10, event_rate, speciation_mean)#monitors[++mni] = mnStochasticBranchRate(cdbdp=timetree, printgen=1, filename=DATASET + ".bf" + ".log")################# The Analysis #################pow_p = powerPosterior(mymodel, moves, monitors, "pow_p_BDS.out", cats=100, sampleFreq=10)pow_p.burnin(generations=100,tuningInterval=25)pow_p.run(generations=500)### Use stepping-stone sampling to calculate marginal likelihoodsss = steppingStoneSampler(file="pow_p_BDS.out", powerColumnName="power", likelihoodColumnName="likelihood")ss.marginal()### Use path-sampling to calculate marginal likelihoodsps = pathSampler(file="pow_p_BDS.out", powerColumnName="power", likelihoodColumnName="likelihood")ps.marginal()## quit ##q()