################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   branch-specific birth-death model
#
#
# authors: Sebastian Hoehna
#
################################################################################


#######################
# Reading in the Data #
#######################

# Read in the observed phylogeny
observed_phylogeny <- readTrees("../data/" + DATASET + ".tre")[1]

# Get the names of the taxa in the tree and the age of the tree. We need these later on.
taxa <- observed_phylogeny.taxa()
root <- observed_phylogeny.rootAge()
tree_length <- observed_phylogeny.treeLength()

# set my move index
mvi = 0
mni = 0

# Global parameters for our analysis
NUM_TOTAL_SPECIES = taxa.size()
H = 0.587405

####################
# Create the rates #
####################

### rho is the probability of sampling species at the present
### fix this to 367/367, since there are ~367 described species of primates
### and we have sampled 367
rho <- observed_phylogeny.ntips() / NUM_TOTAL_SPECIES

### Specify a prior on the speciation and extinction rates
rate_mean <- (NUM_TOTAL_SPECIES-2) / tree_length
rate_sd   <- H

### Create a deterministic variable for the speciation rate categories
### using a discretized lognormal distribution (the N-quantiles of it)
speciation := fnDiscretizeDistribution( dnLognormal(ln(rate_mean), rate_sd), NUM_RATE_CATEGORIES )

### Set all the extinction rates to 0.0
extinction_mean <- rate_mean / 2.0
extinction := rep(extinction_mean, NUM_RATE_CATEGORIES)

### Create a exponential distributed variable for the rate of rate-shift events
event_rate <- EXPECTED_NUM_EVENTS/tree_length

### Create a uniformly distributed variable for the category at the root
rate_cat_probs <- simplex( rep(1, NUM_RATE_CATEGORIES) )

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
                    speciationRates   = speciation,
                    extinctionRates   = extinction, 
                    Q                 = fnJC(NUM_RATE_CATEGORIES),
                    delta             = event_rate, 
                    pi                = rate_cat_probs,
                    rho               = rho,
                    condition         = "time" )
                    
### clamp the model with the "observed" tree
timetree.clamp(observed_phylogeny)


moves = VectorMoves()


#############
# The Model #
#############

### workspace model wrapper ###
mymodel = model(speciation)

### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnScreen(printgen=10, event_rate, extinction_mean)
monitors[++mni] = mnStochasticBranchRate(cdbdp=timetree, printgen=1, filename="output/" + DATASET + "_FRCBD_stoch_char_map_" + NUM_RATE_CATEGORIES + "_" + EXPECTED_NUM_EVENTS + ".log")


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=4, combine="mixed")

### run the MCMC
mymcmc.run(generations=50000, tuningInterval=500)

## quit ##
q()
