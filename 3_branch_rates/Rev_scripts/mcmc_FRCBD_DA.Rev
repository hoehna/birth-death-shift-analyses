################################################################################
#
# RevBayes Example: Bayesian inference of diversification rates under a
#                   branch-specific birth-death model
#
#
# authors: Sebastian Hoehna
#
################################################################################


#######################
# Reading in the Data #
#######################

# Read in the observed phylogeny
observed_phylogeny <- readTrees("../data/" + DATASET + ".tre")[1]

# Get the names of the taxa in the tree and the age of the tree. We need these later on.
taxa <- observed_phylogeny.taxa()
root <- observed_phylogeny.rootAge()
tree_length <- observed_phylogeny.treeLength()

# set my move index
mvi = 0
mni = 0

# Global parameters for our analysis
EXPECTED_NUM_EVENTS = 2
NUM_TOTAL_SPECIES = taxa.size()
H = 0.587405

####################
# Create the rates #
####################

### rho is the probability of sampling species at the present
### fix this to 367/367, since there are ~367 described species of primates
### and we have sampled 367
rho <- observed_phylogeny.ntips() / NUM_TOTAL_SPECIES

### Specify a prior on the speciation and extinction rates
rate_mean <- (NUM_TOTAL_SPECIES-2) / tree_length
rate_sd   <- H

### Create a lognormal distributed variable for the mean speciation rate
### Create a deterministic variable for the speciation rate categories
### using a discretized lognormal distribution (the N-quantiles of it)
speciation := fnDiscretizeDistribution( dnLognormal(ln(rate_mean), rate_sd), NUM_RATE_CATEGORIES )

### Set all the extinction rates to be equal
extinction_mean <- rate_mean / 2.0
extinction := rep(extinction_mean, NUM_RATE_CATEGORIES)

### Create a uniformly distributed variable for the category at the root
root_category ~ dnUniformNatural(1,NUM_RATE_CATEGORIES)
moves[++mvi] = mvRandomIntegerWalk(root_category,weight=10)

### Create a exponential distributed variable for the rate of rate-shift events
event_rate <- EXPECTED_NUM_EVENTS/tree_length

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnHBDP(lambda=speciation, mu=extinction, rootAge=root, rho=rho, rootState=root_category, delta=event_rate, taxa=taxa, condition="time", allowSameCategory=FALSE )

### clamp the model with the "observed" tree
timetree.clamp(observed_phylogeny)

### Create moves that change the augmented rate-shift events on the tree
moves[++mvi] = mvBirthDeathEvent(timetree,weight=20)
moves[++mvi] = mvDiscreteEventCategoryRandomWalk(timetree,weight=10)
#moves[++mvi] = mvEventTimeBeta(timetree, delta=0.01, offset=1.0, weight=10,tune=TRUE)
moves[++mvi] = mvEventTimeSlide(timetree, delta=timetree.treeLength()/10.0, weight=10,tune=false)
moves[++mvi] = mvEventTimeSlide(timetree, delta=timetree.treeLength()/50.0, weight=10,tune=false)
moves[++mvi] = mvEventTimeSlide(timetree, delta=timetree.treeLength()/100.0, weight=10,tune=false)

### Create some deterministic variable that hold information about the rates per branch
num_events := timetree.numberEvents()
avg_lambda := timetree.averageSpeciationRate()
avg_mu     := timetree.averageExtinctionRate()
avg_net    := avg_lambda - avg_mu
avg_rel    := avg_mu / avg_lambda

total_num_events := sum( num_events )

#############
# The Model #
#############

### workspace model wrapper ###
mymodel = model(speciation)

### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnModel(filename="output/" + DATASET + "_FRCBD_" + NUM_RATE_CATEGORIES + ".log",printgen=1, separator = TAB)
monitors[++mni] = mnScreen(printgen=1000, event_rate, root_category, total_num_events)


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=20, combine="mixed")
#mymcmc = mcmcmc(mymodel, monitors, moves, nchains=20, swapInterval=1, nruns=1, combine="mixed")

### run the MCMC
mymcmc.run(generations=4000, tuningInterval=200)


mymcmc.operatorSummary()


## quit ##
q()
